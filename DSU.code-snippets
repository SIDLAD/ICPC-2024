{
	"Disjoint Set Union": {
		"scope":"cpp",
		"prefix": "dsucode",
		"body": [
		  "",
		  "class DSU {",
		  "public:",
		  "    int n;",
		  "    vector<int> p,sz,rank;",
		  "    int start, count = 0;",
		  " ",
		  "    DSU(int start,int n) : n(n),start(start) {",
		  "        rank.resize(n+1,1);",
		  "        p.resize(n+1);",
		  "        sz.resize(n+1);",
		  "        for(int i=start;i<=n;i++)",
		  "        {",
		  "            p[i] = i;",
		  "            sz[i] = 1;",
		  "            count++;",
		  "        }",
		  "    }",
		  "",
		  "    DSU(int n):DSU(0,n-1){}",
		  " ",
		  "    int find(int x) {",
		  "        if(x == p[x]) return x;",
		  "        return find(p[x]);",
		  "    }",
		  "    int size(int x)",
		  "    {",
		  "        if(x == p[x]) return sz[x];",
		  "        else return sz[find(p[x])];",
		  "    }",
		  " ",
		  "    bool unite(int a, int b) {",
		  "        int c = find(a);",
		  "        int d = find(b);",
		  "        if(d != c) {",
		  "            if(rank[c] < rank[d]) swap(c,d);",
		  "            if(rank[c] == rank[d]) rank[c]++;",
		  "            p[d] = c;",
		  "            sz[c] += sz[d];",
		  "            count--;",
		  "            return true;",
		  "        }",
		  "        return false;",
		  "    }",
		  "};",
		  ""
		],
		"description": ""
	  },
	  "Disjoint Set Union with Path Compression": {
		"scope":"cpp",
		"prefix": "dsupc",
		"body": [
		  "",
		  "class DSU {",
		  "public:",
		  "    int n;",
		  "    vector<int> p,sz,rank;",
		  "    int start, count = 0;",
		  " ",
		  "    DSU(int start,int n) : n(n),start(start) {",
		  "        rank.resize(n+1,1);",
		  "        p.resize(n+1);",
		  "        sz.resize(n+1);",
		  "        for(int i=start;i<=n;i++)",
		  "        {",
		  "            p[i] = i;",
		  "            sz[i] = 1;",
		  "            count++;",
		  "        }",
		  "    }",
		  "",
		  "    DSU(int n):DSU(0,n-1){}",
		  " ",
		  "    int find(int x) {",
		  "        if(x == p[x]) return x;",
		  "        return p[x] = find(p[x]);",
		  "    }",
		  "    int size(int x)",
		  "    {",
		  "        if(x == p[x]) return sz[x];",
		  "        else return sz[p[x] = find(p[x])];",
		  "    }",
		  " ",
		  "    bool unite(int a, int b) {",
		  "        int c = find(a);",
		  "        int d = find(b);",
		  "        if(d != c) {",
		  "            if(rank[c] < rank[d]) swap(c,d);",
		  "            if(rank[c] == rank[d]) rank[c]++;",
		  "            p[d] = c;",
		  "            sz[c] += sz[d];",
		  "            count--;",
		  "            return true;",
		  "        }",
		  "        return false;",
		  "    }",
		  "};",
		  ""
		],
		"description": ""
	  }
}
